import static org.junit.jupiter.api.Assertions.assertEquals;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

import org.junit.jupiter.api.Test;

import socs.keygen.AESCipher;
import socs.keygen.HashGenerator;

public class KeyEncryptionTest {
    @Test
    void TestCorrectEncryptionECB() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {
        String pin = "1234";
        byte[] privateEnc = Base64.getDecoder().decode("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");
        byte [] privateKey = Base64.getDecoder().decode("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");

        HashGenerator hashGen = new HashGenerator(MessageDigest.getInstance("SHA-256"));
        SecretKey hashPIN = hashGen.getHashAsKey(pin, "AES");
        AESCipher cipher = new AESCipher(Cipher.getInstance("AES/ECB/PKCS5Padding"));
        byte [] encryptedPrivateKey = cipher.encrypt(hashPIN, privateKey, null);
        assertEquals(Base64.getEncoder().encodeToString(encryptedPrivateKey), Base64.getEncoder().encodeToString(privateEnc));
    }
    @Test
    void TestCorrectEncryptionCBC() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {
        String pin = "1234";
        byte[] privateEnc = Base64.getDecoder().decode("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");
        byte [] privateKey = Base64.getDecoder().decode("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");
        byte[] iVector = Base64.getDecoder().decode("YowrLWPmtISQLOpS5A1vfQ==");
        
        HashGenerator hashGen = new HashGenerator(MessageDigest.getInstance("SHA-256"));
        SecretKey hashPIN = hashGen.getHashAsKey(pin, "AES");
        AESCipher cipher = new AESCipher(Cipher.getInstance("AES/CBC/PKCS5Padding"));
        IvParameterSpec iv = new IvParameterSpec(iVector);
        byte [] encryptedPrivateKey = cipher.encrypt(hashPIN, privateKey, iv);
        assertEquals(Base64.getEncoder().encodeToString(encryptedPrivateKey), Base64.getEncoder().encodeToString(privateEnc));
    }
}